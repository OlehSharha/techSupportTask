/*
2 TASK:
SUDOKU TEST (JS)


Судоку - це гра, в яку грають на сітці 9x9. Мета гри - заповнити всі клітинки сітки цифрами від 1 до 9 так, щоб кожен стовпчик, кожен рядок і кожна з дев'яти підсіток 3х3 (також відомих як блоки) містили всі цифри від 1 до 9.

(Більше інформації за посиланням: http://en.wikipedia.org/wiki/Sudoku)

Валідатор розв'язків Судоку

Напишіть функцію validSolution(), яка отримує двовимірний масив, що представляє дошку Судоку, і повертає true, якщо це правильний розв'язок, або false у протилежному випадку. Клітинки дошки судоку також можуть містити 0, які означають порожні клітинки. Дошки, що містять один або більше нулів, вважаються невірними розв'язками.


Дошка завжди має розмір 9 клітинок на 9 клітинок, і кожна клітинка містить лише цілі числа від 0 до 9.

validSolution([
  [5, 3, 4, 6, 7, 8, 9, 1, 2],
  [6, 7, 2, 1, 9, 5, 3, 4, 8],
  [1, 9, 8, 3, 4, 2, 5, 6, 7],
  [8, 5, 9, 7, 6, 1, 4, 2, 3],
  [4, 2, 6, 8, 5, 3, 7, 9, 1],
  [7, 1, 3, 9, 2, 4, 8, 5, 6],
  [9, 6, 1, 5, 3, 7, 2, 8, 4],
  [2, 8, 7, 4, 1, 9, 6, 3, 5],
  [3, 4, 5, 2, 8, 6, 1, 7, 9]
]); // => true

 validSolution([
  [5, 3, 4, 6, 7, 8, 9, 1, 2],
  [6, 7, 2, 1, 9, 0, 3, 4, 8],
  [1, 0, 0, 3, 4, 2, 5, 6, 0],
  [8, 5, 9, 7, 6, 1, 0, 2, 0],
  [4, 2, 6, 8, 5, 3, 7, 9, 1],
  [7, 1, 3, 9, 2, 4, 8, 5, 6],
  [9, 0, 1, 5, 3, 7, 2, 1, 4],
  [2, 8, 7, 4, 1, 9, 6, 3, 5],
  [3, 0, 0, 4, 8, 1, 1, 7, 9]
]); // => false
*/

const arrToCheck1 = [
  [5, 3, 4, 6, 7, 8, 9, 1, 2],
  [6, 7, 2, 1, 9, 0, 3, 4, 8],
  [1, 0, 0, 3, 4, 2, 5, 6, 0],
  [8, 5, 9, 7, 6, 1, 0, 2, 0],
  [4, 2, 6, 8, 5, 3, 7, 9, 1],
  [7, 1, 3, 9, 2, 4, 8, 5, 6],
  [9, 0, 1, 5, 3, 7, 2, 1, 4],
  [2, 8, 7, 4, 1, 9, 6, 3, 5],
  [3, 0, 0, 4, 8, 1, 1, 7, 9]
]

const arrToCheck2 = [
  [5, 3, 4, 6, 7, 8, 9, 1, 2],
  [6, 7, 2, 1, 9, 5, 3, 4, 8],
  [1, 9, 8, 3, 4, 2, 5, 6, 7],
  [8, 5, 9, 7, 6, 1, 4, 2, 3],
  [4, 2, 6, 8, 5, 3, 7, 9, 1],
  [7, 1, 3, 9, 2, 4, 8, 5, 6],
  [9, 6, 1, 5, 3, 7, 2, 8, 4],
  [2, 8, 7, 4, 1, 9, 6, 3, 5],
  [3, 4, 5, 2, 8, 6, 1, 7, 9]
]

function sudokuChecking(board) {
	/* Перевірка рядків на відповідність умови судоку */
	for (let i = 0; i < 9; i++) {
	  const row = board[i];
	  if (!arrayUniqCheck(row)) {
		return false;
	  }
	}

	/* Перевірка стовпців на відповідність умови судоку */
	for (let j = 0; j < 9; j++) {
	  const column = [];
	  for (let i = 0; i < 9; i++) {
		column.push(board[i][j]);
	  }
	  if (!arrayUniqCheck(column)) {
		return false;
	  }
	}

	/* Перевірка підсіток 3x3 на відповідність умови судоку */
	for (let i = 0; i < 9; i += 3) {
	  for (let j = 0; j < 9; j += 3) {
		const subgrid = [];
		for (let k = i; k < i + 3; k++) {
		  for (let l = j; l < j + 3; l++) {
			subgrid.push(board[k][l]);
		  }
		}
		if (!arrayUniqCheck(subgrid)) {
		  return false;
		}
	  }
	}

	return true;
  }

  /* допоміжна функція за допомогою якої ми можемо перевірити чи у нас ряд, стовпець містить унікальні символи,
	 тобто якщо у нас будуть два одинакові то за допомогою new Set, ми видалимо повторювані символи,
  	 то тоді функція поверне false бо довжина масиву що ми перевіряємо і довжина об'єкту з унікальними значеннями відрізняються, також за допомогою delete,
  	 ми видаляємо нулі у унікальному об'єкті і знову довжина масиву буде відрізнятись, якщо нулів не буде то і delete нічого не буде видаляти, а тоже це спрацьовує лише коли є 0.
	  функція повертає true, якщо розмір унікального об'єкту дорівнює розміру масива який ми перевіряємо або false якщо у нас є повторювані елементи або нулі.
  */
  function arrayUniqCheck(arr) {
	const set = new Set(arr);
	set.delete(0);
	return set.size === arr.length;
  }

  console.log('second task result checking:', sudokuChecking(arrToCheck1))
  console.log('second task result checking:', sudokuChecking(arrToCheck2))